package com.bavelsoft.ddd;

import java.util.function.Function;
import java.util.List;
import java.util.Optional;
import java.util.Set;

public abstract class Initializer<T, R> {
	private final List<Default<T, Object>> defaults = defaults();
	private final List<Validation<T, R>> validations = validations();

	abstract protected List<Default<T, Object>> defaults();

	abstract protected List<Validation<T, R>> validations();

	public void initialize(T object, Set<R> validationResults) {
		assignDefaults(object);
		validate(object, validationResults);
	}

	private void assignDefaults(T object) {
		Object[] defaultValues = new Object[defaults.size()];
		int i=0;
		for (Default<T, Object> d : defaults) {
			defaultValues[i++] = d.defaultFunction().apply(object);
		}
		int j=0;
		for (Default d : defaults) {
			d.setter().accept(defaultValues[j++]);
		}
	}

	private void validate(T object, Set<R> validationResults) {
		for (Validation<T, R> v : validations) {
			if (v.test(object)) {
				validationResults.add(v.apply(object));
			}
		}
	}
}


